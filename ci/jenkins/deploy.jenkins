#!groovy
// Run docker build
properties([disableConcurrentBuilds()])

pipeline {
    agent any
//    triggers { pollSCM('* * * * *') }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
         stage("docker version") {
            steps {
                echo " ============== docker version =================="
                sh 'docker -v'
            }
        }
        stage("create docker image") {
            steps {
                echo " ============== start building image =================="
                sh '''
                docker build -t new_bot:latest -f ./ci/docker/Dockerfile .
                '''
            }
        }
        stage("docker run") {
            steps {
                echo " ============== run bot container =================="
                sh '''
                echo " ============== check bot container existing =================="
                if docker ps | grep bot > /dev/null; then
                  echo " ============== container exist ==================";
                  docker create --volumes-from bot --name bot_tmp new_bot:latest;
                  docker stop bot;
                  docker start bot_tmp;
                  if docker ps | grep bot_tmp > /dev/null; then
                    echo " ============== new container start success ==================";
                    docker rm bot;
                    docker rename bot_tmp bot;
                  else
                    echo " ============== restart old container ==================";
                    docker start bot;
                  fi;
                else
                  echo " ============== bot container does not exist ==================";
                  docker run --name bot --detach new_bot:latest;
                fi;
                '''
            }
        }
    }
}
